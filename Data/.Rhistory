app = strava_app,
scope = app_scope,
cache = cache)
}
token <- config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope="activity:read_all"))
token <- config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope="activity:read_all"), cache)
token <- config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope, cache))
df_list <- list()
i <- 1
done <- FALSE
while (!done) {
req <- GET(
url = "https://www.strava.com/api/v3/athlete/activities",
config = token,
query = list(per_page = 200, page = i)
)
df_list[[i]] <- fromJSON(content(req, as = "text"), flatten = TRUE)
if (length(content(req)) < 200) {
done <- TRUE
} else {
i <- i + 1
}
}
df <- rbind_pages(df_list)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
df <- rbind_pages(df_list)
df_list
install.packages("broom")
library(tidyverse)
df <- rbind_pages(df_list)
install.packages("plyr")
library(plyr)
df <- rbind_pages(df_list)
View(df)
library(httr)
library(jsonlite)
library(httpuv)
library(plyr)
app_name = 'Hainke'
app_client_id = 27107
app_secret = '4240119432b465b1530792f46912c711896b22f1'
app_scope = 'activity:read_all'
cache = TRUE
# Strava authentication function
# (Credit to https://fawda123.github.io/rStrava/)
strava_oauth <- function(app_name, app_client_id, app_secret, app_scope, cache){
strava_app <- oauth_app(appname = app_name, key = app_client_id, secret = app_secret)
strava_end <- oauth_endpoint(
request = "https://www.strava.com/oauth/authorize?",
authorize = "https://www.strava.com/oauth/authorize",
access = "https://www.strava.com/oauth/token")
oauth2.0_token(endpoint = strava_end,
app = strava_app,
scope = app_scope,
cache = cache)
}
# Authorize User
token <- config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope, cache))
# Get User Activity List
# (Credit to https://bldavies.com/blog/accessing-strava-api/)
df_list <- list()
i <- 1
done <- FALSE
while (!done) {
req <- GET(
url = "https://www.strava.com/api/v3/athlete/activities",
config = token,
query = list(per_page = 200, page = i)
)
df_list[[i]] <- fromJSON(content(req, as = "text"), flatten = TRUE)
if (length(content(req)) < 200) {
done <- TRUE
} else {
i <- i + 1
}
}
df <- rbind_pages(df_list)
View(df)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4861939701",
config = token,
query = list(per_page = 200, page = i)
)
View(activity)
activity$content
activity$times
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4861939701",
config = token)
)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4861939701",
config = token
)
View(activity)
View(req)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
View(df)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/00F99E63-C6EC-4FFE-B9C4-B5BDC979EF05",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities?00F99E63-C6EC-4FFE-B9C4-B5BDC979EF05",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities?4851027538",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/?4851027538",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(activity)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/?4851027538",
config = token
)
View(activity)
View(activity)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/{4851027538}",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/{00F99E63-C6EC-4FFE-B9C4-B5BDC979EF05}",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/00F99E63-C6EC-4FFE-B9C4-B5BDC979EF05",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4838473575",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(activity)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(activity)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/include_all_efforts='TRUE'",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(activity)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/include_all_efforts=TRUE",
config = token
)
View(activity)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities?include_all_efforts=TRUE",
config = token
)
View(activity)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4851027538",
config = token
)
View(activity)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4851027538/streams",
config = token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
View(activity)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4851027538/streams",
token
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(activity)
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4851027538/streams",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(activity)
token <- config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope, cache))
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4851027538/streams",
token,
query = list(resolution = NULL, series_type = NULL)
)
types = list("latlng")
strtypes <- types[[1]]
if(length(types)>1){
for(i in 2:length(types)){
strtypes <- paste(strtypes,",", types[[i]], sep="")
}
}
types = list('distance', 'latlng')
strtypes <- types[[1]]
if(length(types)>1){
for(i in 2:length(types)){
strtypes <- paste(strtypes,",", types[[i]], sep="")
}
}
strtypes
activity <- GET(
url = "https://www.strava.com/api/v3/athlete/activities/4851027538/streams/distance,latlng",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
activity <- GET(
url = "https://www.strava.com/api/v3/activities/4851027538/",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
test$distance
activity <- GET(
url = "https://www.strava.com/api/v3/activities/4851027538/streams/distance,latlng",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
test$data
token
token$auth_token
test$series_type
test$original_size
test$resolution
test$type
test$data[1]
test$data[2]
install.packages("ggmap")
library(ggmap)
# store bounding box coordinates
chi_bb <- c(left = -87.936287,
bottom = 41.679835,
right = -87.447052,
top = 42.000835)
chicago_stamen <- get_stamenmap(bbox = chi_bb,
zoom = 11)
chicago_stamen
ggmap(chicago_stamen)
library(httr)
library(jsonlite)
library(httpuv)
library(plyr)
library(ggmap)
app_name = 'Hainke'
app_client_id = 27107
app_secret = '4240119432b465b1530792f46912c711896b22f1'
app_scope = 'activity:read_all'
cache = TRUE
# Strava authentication function
# (Credit to https://fawda123.github.io/rStrava/)
strava_oauth <- function(app_name, app_client_id, app_secret, app_scope, cache){
strava_app <- oauth_app(appname = app_name, key = app_client_id, secret = app_secret)
strava_end <- oauth_endpoint(
request = "https://www.strava.com/oauth/authorize?",
authorize = "https://www.strava.com/oauth/authorize",
access = "https://www.strava.com/oauth/token")
oauth2.0_token(endpoint = strava_end,
app = strava_app,
scope = app_scope,
cache = cache)
}
# Authorize User
token <- config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope, cache))
# Get User Activity List
# (Credit to https://bldavies.com/blog/accessing-strava-api/)
df_list <- list()
i <- 1
done <- FALSE
while (!done) {
req <- GET(
url = "https://www.strava.com/api/v3/athlete/activities",
config = token,
query = list(per_page = 200, page = i)
)
df_list[[i]] <- fromJSON(content(req, as = "text"), flatten = TRUE)
if (length(content(req)) < 200) {
done <- TRUE
} else {
i <- i + 1
}
}
df <- rbind_pages(df_list)
View(df)
activity <- GET(
url = "https://www.strava.com/api/v3/activities/4880702541",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
View(df_list)
df_list[[1]]
test <- as.data.frame(df_list[[1]])
View(test)
library(httr)
library(jsonlite)
library(httpuv)
library(plyr)
library(ggmap)
app_name = 'Hainke'
app_client_id = 27107
app_secret = '4240119432b465b1530792f46912c711896b22f1'
app_scope = 'activity:read_all'
cache = TRUE
# Strava authentication function
# (Credit to https://fawda123.github.io/rStrava/)
strava_oauth <- function(app_name, app_client_id, app_secret, app_scope, cache){
strava_app <- oauth_app(appname = app_name, key = app_client_id, secret = app_secret)
strava_end <- oauth_endpoint(
request = "https://www.strava.com/oauth/authorize?",
authorize = "https://www.strava.com/oauth/authorize",
access = "https://www.strava.com/oauth/token")
oauth2.0_token(endpoint = strava_end,
app = strava_app,
scope = app_scope,
cache = cache)
}
# Authorize User
token <- config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope, cache))
# Get User Activity List
# (Credit to https://bldavies.com/blog/accessing-strava-api/)
df_list <- list()
i <- 1
done <- FALSE
while (!done) {
req <- GET(
url = "https://www.strava.com/api/v3/athlete/activities",
config = token,
query = list(per_page = 200, page = i)
)
df_list[[i]] <- fromJSON(content(req, as = "text"), flatten = TRUE)
if (length(content(req)) < 200) {
done <- TRUE
} else {
i <- i + 1
}
}
df <- rbind_pages(df_list)
activity <- GET(
url = "https://www.strava.com/api/v3/activities/4880702541/streams",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
activity <- GET(
url = "https://www.strava.com/api/v3/activities/4851027538/streams",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
activity <- GET(
url = "https://www.strava.com/api/v3/activities/4851027538/streams/distance,latlng",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
test$data[1]
activity <- GET(
url = "https://www.strava.com/api/v3/activities/4851027538/streams",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
activity <- GET(
url = "https://www.strava.com/api/v3/activities/4851027538/streams/time,latlng,distance,altitude,velocity_smooth,heartrate,cadence,watts,temp,moving,grade_smooth",
token,
query = list(resolution = NULL, series_type = NULL)
)
test <- fromJSON(content(activity, as = "text", flatten = TRUE))
View(test)
testa <- flatten(test, recursive = TRUE)
View(testa)
class(test$data)
test <- fromJSON(content(activity, as = "text"), flatten = TRUE)
View(test)
test$data[1]
class(test$data[1])
testa <- cbind(as.vector(test$data[1]), as.vector(test$data[2]))
testa
testa <- as.data.frame(as.vector(test$data[1]), as.vector(test$data[2]))
testa <- as.data.frame(test$data[1])
head(testa)
testa <- as.data.frame(test$data[1], col.names = c("test"))
head(testa)
testa <- as.data.frame(test$data)
head(testa)
testa <- as.data.frame(test$data, col.names = test$type)
head(testa)
names(df)
filter(df, id = 4851027538)
head(df)
filter(df, id == 4851027538)
class(df$id)
df[id==4851027538,]
df[id=='4851027538',]
filter(df, id == '4851027538')
class(df)
names(df)
head(df$id)
df[1,]
filter(df, id == 4897290090)
df[id == 4897290090,]
filter(df, id %in% c(4851027538))
df$id
unlist(df$id)
dfa <- mutate(df, id = unlist(id))
filter(dfa, id == 4851027538)
class(dfa$id)
class(df$id)
dfa <- mutate(df, id = as.numeric(id))
filter(dfa, id == 4851027538)
df$id[1]
class(df$id[1])
df$id[df$id == 4897290090]
df[df$id == 4897290090,]
df[df$id == 4851027538,]
View(df)
View(testa)
names(testa)
ggplot(data,
aes(latlng.1, latlng.2, group = id)) +
geom_path(colour="steelblue",alpha = 0.2) +
coord_map(projection = "mercator", clip = "on")
ggplot(testa,
aes(latlng.1, latlng.2, group = id)) +
geom_path(colour="steelblue",alpha = 0.2) +
coord_map(projection = "mercator", clip = "on")
head(testa)
ggplot(testa,
aes(latlng.2, latlng.1, group = id)) +
geom_path(colour="steelblue",alpha = 0.2) +
coord_map(projection = "mercator", clip = "on")
ggplot(testa,
aes(latlng.2, latlng.1)) +
geom_path(colour="steelblue",alpha = 0.2) +
coord_map(projection = "mercator", clip = "on")
ggplot(testa,
aes(x=latlng.2, y=latlng.1)) +
geom_path(colour="steelblue",alpha = 0.2)
ggplot(testa,
aes(x=latlng.2, y=latlng.1)) +
geom_path(colour="steelblue",alpha = 0.2) +
coord_map(projection = "mercator", clip = "on")
ggplot(testa,
aes(x=latlng.2, y=latlng.1)) +
geom_path(colour="steelblue",alpha = 0.2) +
coord_map()
install.packages("mapproj")
library(mapproj)
ggplot(testa,
aes(x=latlng.2, y=latlng.1)) +
geom_path(colour="steelblue",alpha = 0.2) +
coord_map()
ggplot(testa,
aes(x=latlng.2, y=latlng.1)) +
geom_path(colour="steelblue",alpha = 0.2) +
coord_map(projection = "mercator")
View(testa)
load("C:/Users/haink/Desktop/strava.RData")
shiny::runApp('GitHub/COVID19/2021-04_BC_Covid/Shiny_App')
?oath_app
?oauth_app
shiny::runApp('GitHub/COVID19/2021-04_BC_Covid/Shiny_App')
setwd("~/GitHub/NHL/Data")
df <- readRDS("teams.rds")
View(df)
write.csv(df,"teams-old.csv")
library(dplyr)
library(tidyr)
library(jsonlite)
## Get Team Data ##
#####################
teamids <- paste(c(1:58), collapse = ',')
teams <- fromJSON(paste0("https://statsapi.web.nhl.com/api/v1/teams?teamId=",teamids))
df_team <- teams$teams
write.csv(df_team,"teams-new.csv")
names(df)
names(df_team)
