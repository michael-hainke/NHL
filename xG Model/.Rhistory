mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = df_final, aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
# Packages
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = df_final, aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
# Packages
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = df_final, aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
# Packages
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = df_final, aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
# Packages
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = df_final, aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Dashboard_Lab_Information.csv")
View(df)
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = df_final, aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv")
View(df)
df = df %>% filter(HA == 'All')
# Packages
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = df_final, aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
# Packages
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = df_final, aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = filter(df_final, wave == 'Wave 5: Dec 6 - today'), aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv")
# Packages
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = filter(df_final, wave == 'Wave 5: Dec 6 - today'), aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
# Packages
library(tidyverse)
library(zoo)  # rolling averages
# Read and Filter Data from BC CDC Website
df <- read.csv("http://www.bccdc.ca/Health-Info-Site/Documents/BCCDC_COVID19_Regional_Summary_Data.csv") %>%
filter(HA == 'Vancouver Coastal' & HSDA == 'All')
# Filter data for 5 waves
df_final <- df %>%
filter(Date >= '2020-03-03' & Date <= '2020-05-10') %>%
mutate(wave = "Wave 1: Mar 10/20 - May 10/20") %>%
rbind( filter(df, Date >= '2020-10-19' & Date <= '2020-12-26') %>%
mutate(wave = "Wave 2: Oct 26/20 - Dec 26/20")) %>%
rbind( filter(df, Date >= '2021-03-10' & Date <= '2021-05-17') %>%
mutate(wave = "Wave 3: Mar 17/21 - May 17/21")) %>%
rbind( filter(df, Date >= '2021-07-20' & Date <= '2021-09-27') %>%
mutate(wave = "Wave 4: July 28/21 - Sept 28/21")) %>%
rbind( filter(df, Date >= '2021-11-30') %>%
mutate(wave = "Wave 5: Dec 6 - today")) %>%
arrange(Date) %>%
group_by(wave) %>%
mutate(day = seq_along(Date),
rolling_mean = rollmean(Cases_Reported, k=7, fill=NA)) %>%
ungroup()
# Plot
plot <- ggplot() +
geom_line(data = df_final, aes(x=day, y=rolling_mean, group=wave, colour=wave), size=1) +
geom_point(data = filter(df_final, wave == 'Wave 5: Dec 6 - today'), aes(x=day, y=Cases_Reported, group=wave, colour=wave)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position="right") +
labs(y = "Cases",
x = "Day",
title = paste0("BC COVID19 Vancouver Coastal Cases Rolling 7 Day Average"),
caption = paste0("Chart: Michael Hainke.  Data: BC CDC.  Last Update: ", max(df_final$Date)))
plot
library(tidyverse)  # data manipulation
1:10
rnorm(1:10)
?rnorm
1:10 %>% map(rnorm, n = 10)
1:10 %>% map(rnorm, n = 5)
1:10
1:10 %>% map(.x, n = 5)
1:10 %>% map(1, n = 5)
map(1, n = 5)
names(df_final)
names(df)
setwd("~/GitHub/NHL/xG Model")
df <- readRDS('../Data/2022-02-03_plays_2021-2022.rds')
names(df)
View(df)
predictor_names <- c("secondaryType",
"dist",
"angle",
"last_shot")
outcome_name <- "Event"
id_names <- c("dateTime",
"name",
"Shooter",
"gamePk",
"away_team",
"home_team")
col_names <- c(id_names, predictor_names, outcome_name)
xg_data <- df %>%
filter(eventTypeId %in% c("GOAL","SHOT"),
!is.na(x),
!is.na(y),
!(period == 5 & periodTime == '00:00')) %>%
mutate(time_s = as.integer(substr(periodTime,1,2))*60+as.integer(substr(periodTime,4,5)),
dist = sqrt(y^2 + (89 - abs(x))^2),
angle = case_when(abs(x) <= 89 ~ atan((abs(y)-2.999)/(89 - abs(x)))*180/pi,
TRUE ~ atan((abs(y)-2.9999)/(0))*180/pi)) %>%
group_by(gamePk, period, name) %>%
arrange(time_s) %>%
mutate(last_shot = time_s - lag(time_s, 1)) %>%
ungroup() %>%
mutate(Event = case_when(eventTypeId == "GOAL" ~ 1,
TRUE ~ 0)) %>%
select(one_of(col_names))
library(tidyverse)  # data manipulation
library(lubridate)  # date parsing
xg_data <- df %>%
filter(eventTypeId %in% c("GOAL","SHOT"),
!is.na(x),
!is.na(y),
!(period == 5 & periodTime == '00:00')) %>%
mutate(time_s = as.integer(substr(periodTime,1,2))*60+as.integer(substr(periodTime,4,5)),
dist = sqrt(y^2 + (89 - abs(x))^2),
angle = case_when(abs(x) <= 89 ~ atan((abs(y)-2.999)/(89 - abs(x)))*180/pi,
TRUE ~ atan((abs(y)-2.9999)/(0))*180/pi)) %>%
group_by(gamePk, period, name) %>%
arrange(time_s) %>%
mutate(last_shot = time_s - lag(time_s, 1)) %>%
ungroup() %>%
mutate(Event = case_when(eventTypeId == "GOAL" ~ 1,
TRUE ~ 0)) %>%
select(one_of(col_names))
model_folder <- "~/GitHub/NHL/xG Model/Outputs"
model_name <- "2022-02-04_NHL_XGMODEL_LR_v1.rds"
woe_name <- "2022-02-04_NHL_XGMODEL_WOE.rds"
woe_table <- readRDS(paste0(model_folder,"/",woe_name))
cur_model <- readRDS(paste0(model_folder,"/",model_name))
var_info <- cur_model$pre$mold$blueprint$recipe$var_info
View(var_info)
predictor_names <- var_info %>%
filter(role == 'predictor') %>%
select(variable) %>%
mutate(variable = gsub("_woe","",variable))
View(predictor_names)
col_names <- c(id_names, predictor_names$variable)
id_names <- c("dateTime",
"name",
"Shooter",
"gamePk",
"away_team",
"home_team")
var_info <- cur_model$pre$mold$blueprint$recipe$var_info
predictor_names <- var_info %>%
filter(role == 'predictor') %>%
select(variable) %>%
mutate(variable = gsub("_woe","",variable))
col_names <- c(id_names, predictor_names$variable)
col_names
df_pred <-  xg_data %>% select(one_of(col_names))
col_vector <- xg_data %>%
select(one_of(predictor_names$variable)) %>%
imap_dfr(~ tibble(colname = .y, class = class(.x) %>% str_c(collapse = ", ")))
col_vector <- col_vector %>% filter(colname %in% woe_table$Summary$Variable)
for (i in 1:length(col_vector$colname)) {
if (col_vector$class[i] == 'numeric') {
# extract woe table and split min and max bin
df <- woe_table[["Tables"]][[col_vector$colname[i]]] %>%
mutate(id = as.character(row_number())) %>%
separate(col_vector$colname[i], c("min_bin","max_bin"), ",") %>%
mutate(min_bin = str_replace(min_bin, "\\[",""),
max_bin = as.numeric(str_replace(max_bin, "\\]","")))
# Create a Vector With Bins
bin_cuts <- df %>%
select(id, max_bin) %>%
mutate_all(~replace(., is.na(.),-100000000))
# Split Original Data Into Some Bins
cut_vector <- as.character(cut(df_pred[[col_vector$colname[i]]], breaks = bin_cuts$max, labels = bin_cuts$id[2:length(bin_cuts$id)]))
# Create New Column with WOE Data (train)
tmp <- data.frame(df_pred[[col_vector$colname[i]]], cut_vector, stringsAsFactors = FALSE)
names(tmp) <- c(col_vector$colname[i],"id")
tmp <- mutate(tmp, id = case_when(is.na(id) ~ "1",
TRUE ~ id)) %>%
left_join(df, by = c("id")) %>%
select(WOE) %>%
mutate(WOE = replace_na(WOE, 0))
names(tmp) <- c(paste0(col_vector$colname[i],"_woe"))
} else if (col_vector$class[i] == 'character') {
df <- woe_table[["Tables"]][[col_vector$colname[i]]]
tmp <- data.frame(df_pred[,col_vector$colname[i]])
names(tmp) <- c(col_vector$colname[i])
tmp <- tmp %>%
left_join(df, by = c(col_vector$colname[i])) %>%
select(WOE) %>%
mutate(WOE = replace_na(WOE, 0))
names(tmp) <- c(paste0(col_vector$colname[i],"_woe"))
}
# Bind Onto Existing Dataframe (Train)
df_pred <- cbind.data.frame(df_pred, tmp)
}
df_total <- df_pred %>% select(one_of(id_names),
ends_with("woe"))
View(df_total)
preds <- cur_model %>% predict(df_total, type = "prob")
library(tidymodels) # tidy machine learning functions
preds <- cur_model %>% predict(df_total, type = "prob")
View(preds)
names(df_total)
names(preds)
id_names
names(xg_data)
View(xg_data)
id_names <- c("dateTime",
"name",
"Shooter",
"gamePk",
"away_team",
"home_team")
event <- "Event"
predictor_names <- c("dist",
"angle",
"last_shot")
col_names <- c(id_names,event,predictor_names)
preds
names(preds)
df_total <- cbind(xg_data, preds)
View(df_total)
p <- df_total %>%
ggplot( aes(x=.pred_1, fill=Event)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
p <- df_total %>%
ggplot( aes(x=.pred_1, fill=Event)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity')
p
d = df_total %>% filter(Event == 1) %>% pivot_longer(cols=c('.pred_0','.pred_1',names_to="pred"))
d = df_total %>% filter(Event == 1) %>% pivot_longer(cols=c('.pred_0','.pred_1',names_to="pred",values_to="value"))
d = df_total %>% filter(Event == 1) %>% select(Event,.pred_0,.pred_1) %>% pivot_longer(cols=!Event,names_to="pred",values_to="value"))
d = df_total %>% filter(Event == 1) %>% select(Event,.pred_0,.pred_1) %>% pivot_longer(cols=!Event,names_to="pred",values_to="value")
View(d)
p <- d %>%
ggplot( aes(x=value, fill=pred)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity')
p
View(df_total)
a = df_total %>% filter(gamePk==2021020696)
a
View(a)
group_by(a,name) %>% summarise(goals = sum(event))
a %>% group_by(name) %>% mutate(goals = sum(Event))
a %>% group_by(name) %>% summarise(goals = sum(Event))
a %>% group_by(name) %>% summarise(xG = sum(.pred_1))
sqrt(4)
sqrt(22*22+400)
save.image("~/GitHub/NHL/xG Model/xg_model_predict.RData")
